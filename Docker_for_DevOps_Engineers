Introducao Docker
//version
docker -version
// help
docker

// run container
docker run -d -p 80:80 docker/getting-started

// list of containers
docker ps
// stop docker
docker stop 2b61e5ad1bcc
// remove a container
docker rm 2b61e5ad1bcc

// exemplo de execucao de container pessoal
docker run -d -p 80:80 amigoscode/2048

/** Container **/
Container contains OS, Tools and Binaries and Software

// ver o sistema operativo *// Muito Importante para ter acesso ao container
docker exec -it 2b61e5ad1bcc sh
ls
cd /bin
ls
// ctrl + d to exit

//run other container with the same docker image
docker run -d -p 8080:80 nginx

// list of images on internet
https://hub.docker.com

//example with wordpress
docker run -p 8081:80 -d wordpress

// Managing Containers
list of containers
docker ps 
// stop a container
docker stop 61aa0b253321

/list all conatiners even those stoped ons
docker ps -a
// start a container
docker start 61aa0b253321
// remove ou delete container
docker rm 61aa0b253321
docker rm -f 61aa0b253321

//formatar a descricao do docker para vertical
export FORMAT="ID\t{{.ID}}\nNAME\t{{.Names}}\nIMAGE\t{{.Image}}nPORTS\t{{.Ports}}\nCOMMAND\t{{.Command}}\nCREATED\t{{.CreatedAt}}\nSTATUS\T{{.Status}}\n"
docker ps -a --format=$FORMAT

/** Exposing Multiple Ports
docker run -p 80:80 -p 500:80 -p 3000:80 -d amigoscode/2048

/** Naming Containers
docker run --name Incrivel01 -p 80:80 -p 8081:80 -d amigoscode/2048

/** running container in the background
docker run -p 80:80 -d amigoscode/2048

/** DCOKER IMAGES **/
File used to execute code in a Docker Container

// list docker images
docker image ls

// delete images but first delete the container
docker image rm nginx
or
docker rmi nginx


/** Docker pull - pull images without run
docker pull nginx

/** Inspecting Images // detalhes usados na criacao da imagem.

docker image inspect nginx

/*** DOCKER VOLUMES */ PARTILHA DE FICHEIROS ENTRE CONTAINERS, O MESMO COM O HOST
Allows Data to be shared between Containers and Host

docker run bash bash -c "echo foo > bar.txt && cat bar.txt"

Types o f volumes
1. bind mount

cd Desktop
mkdir bind-mount
cd bind-mount

docker run -v $PWD:/tmp bash \
bash -c "echo foo > /tmp/bar.txt && cat /tmp/bar.txt"

docker run -v $PWD:/tmp bash \
bash -c "cat /tmp/bar.txt"


USING VOLUMES FOR LOCAL DEV || carregar ficheiros para o container

https://startbootstrap.com/theme/sb-admin-2

/** Partilha de ficheiros com o container *//

docker run --name dashboard -v "$PWD:/usr/share/nginx/html" -d -p 8080:80 nginx

Windows users: 
docker run --name dashboard -v "%cd%:/usr/share/nginx/html" -d -p 8080:80 nginx

2. docker volume
/** Creating volumes
/* help
docker volume --help

/* create 
docker volume create vol1
/* inspect
docker volume inspect vol1
/* list
docker volume ls
/* remove
docker volume rm vol1

3. tmpfs // pouco usado, mais detalhes no link abaixo
https://docs.docker.com/storage/tmpfs/

17/01/2022
BUILDING DOCKER IMAGES

/** create a Dockerfile

FROM nginx
COPY . /usr/share/nginx/html

/* list images
docker image ls

/* build image
docker build --help

/** . ilustra que estamos no directorio corrente
docker build . -t dashboard

docker image ls

/** remove container dashboard

docker rm -f dashboard

/** run our image that we've build recently

docker run --name dashboard -d -p 8080:80 dashboard

/** investigate 
docker exec -it dashboard sh

cd /usr/share/nginx/html
ls

/** Building EXpressJS API

mkdir user-api
cd user-api

docker run -w /src -v $PWD:/src --rm node npm init --yes
docker run -w /src -v $PWD:/src --rm node npm i -S express

rm nodefiles

create a Dockerfile

FROM node
WORKDIR /src 
ADD . .
RUN npm install
CMD [ "node", "server.js"]

/* build the image
docker build . -t user-api

/** listar images
docker image ls

/** RUN USER-API IMAGE
docker run --name user-api -p 3000:3000 -d user-api

/** Best pratice to build your own images
https://docs.docker.com/engine/reference/builder/
https://docs.docker.com/develop/develop-images/dockerfile_best-practices/


/** IMAGE TAGGING AND VERSIONING *//

docker pull postgres
/** download a specific image using tags
docker pull postgres:14beta2

/** list images
docker images

/** create tags
docker tag --help

docker tag dashboard:latest dashboard:1

/** remove image with tag
docker rmi dashboard:1

/** build dashboard image with tags
docker build -t dashboard:latest -t dashboard:1 .

/** run container
docker run --name dashboard-v1 -d -p 8080:80 dashboard:1
docker run --name dashboard-latest -d -p 8081:80 dashboard

/** create changes and make version 2, overritting the latest
docker build -t dashboard:latest -t dashboard:2 .

/** remove dashboard:latest
docker rm -f dashboard-latest

docker run --name dashboard-latest -d -p 8081:80 dashboard

/** DICAS
Never run latest in Production

/**Images Variants - dicas para escolher images
https://medium.com/swlh/alpine-slim-stretch-buster-jessie-bullseye-bookworm-what-are-the-differences-in-docker-62171ed4531d

/** DOCKER REGISTRIES
. Public / Private

/** locais onde voce pode fazer push das suas images
    https://hub.docker.com
    https://aws.amazon.com/ecr
    https://cloud.google.com/container-registry
    https://github.com/features/packages
    
/** AUTHENTICATE TO PULL PRIVATE IMAGES
docker login --help

docker login

/** PUSH IMAGES

/*create a repositorie on dockerhub, and specify if it's public or private

docker push carlosmanhique/dashboard:tagname

/** rename image before pushing
docker tag dashboard:latest carlosmanhique/dashboard:latest

/** pushing the image
docker push carlosmanhique/dashboard:latest

/** pushing other tag
docker tag dashboard:2 carlosmanhique/dashboard:2
docker push carlosmanhique/dashboard:2

/** logout
docker logout

/** DOCKER DEBUG

/*docker inspect 
docker inspect --help

docker inspect dashboard-v1

/* Docker Logs
docker logs dashboard-v1

/* ver continuamente os logs
docker logs dashboard-v1 -f

/** Running comands in containers
docker exec --help
/* ver as variaveis do conatiners
docker exec dashboard env
/* ver o files
docker exec dashboard ls

/** sh is a default shell for containers
docker exec -it dashboard-v1 sh

docker exec -it dashboard-v1 bash

/** sair do container
ctrl + d

/** NETWORKING CONTAINERS

docker network --help
/** create network

docker network create mongo

/*list network
docker network ls

/** remove network
docker network rm mongo

docker network inspect mongo

/* pormenores em
https://docs.docker.com/network/

/** running mongoDB and open connections
docker run --name mongo -d --network mongo -p 27017:27017 \
-e MONGO_INITDB_ROOT_USERNAME=username \
-e MONGO_INITDB_ROOT_PASSWORD=secret mongo:5.0.1

/* inspect mongoDB
docker inspect mongo

/** RUN MONGO-EXPRESS and connect to the database
docker run --name mongo-express --network mongo -d -p 8081:8081 \
-e ME_CONFIG_MONGODB_ADMINUSERNAME=username \
-e ME_CONFIG_MONGODB_ADMINPASSWORD=secret \
-e ME_CONFIG_MONGODB_SERVER=mongo mongo-express


/** undestanding container comunication
/** esse comando corre temporariamente, logo que saimos ele desaparece 
docker run --rm -it mongo sh
mongo

docker run --rm --network mongo -it mongo sh

- mongo --host mongo -u username -p secret
- show databases

________Exemplo de network
docker exec -it dashboard-v1 sh

curl user-api://api/v1/users


/** create network
docker network create test
/** conect container
docker network connect test user-api
docker network connect test dashboard-v1

voltar a correr o exemplo
docker exec -it dashboard-v1 sh
curl http://user-api:3000/api/v1/users


/** disconnect container
docker network disconnect test user-api
docker network disconnect test dashboard-v1

docker network rm test

___DOCKER COMPOSE => para agrupar instrucoes, nao fazendo de forma singular
https://docs.docker.com/compose/
/* version 1
docker-compose --help
/* version 2
docker compose --help
__
cd Desktop
mkdir docker-compose
cd docker-compose
touch docker-compose.yaml

/** yaml configuration for the two containers
services:
  mongo:
    image: mongo:5.0.1
    container_name: mongo
    ports:
      - 27017:27017
    environment:
      - MONGO_INITDB_ROOT_USERNAME=incrivel
      - MONGO_INITDB_ROOT_PASSWORD=password
    networks:
      - mongo
  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    ports:
      - 8081:8081
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=incrivel
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongo
    depends_on:
      - mongo
    restart: always
    networks:
      - mongo

networks:
  mongo:
    name: mongo
____remove the imagens
docker rm -f mongo
docker rm -f mongo-express
docker network rm mongo


__run the YAML file
docker compose --help
/* run yaml
docker compose up
docker-compose up -d
/* if the file as named diferently
docker compose -f name-of-file.yaml up

/* stop
docker compose stop
/* start
docker compose start
// list
docker compose ps
docker compose ls

/** remove container with all specification
docker compose down

/** list logs
docker compose logs mongo -f
docker compose logs mongo-express -f
docker-compose --help

docker volume ls
/** adding volume on yaml file

services:
  mongo:
    image: mongo:5.0.1
    container_name: mongo
    ports: 
      - 27017:27017
    environment: 
      - MONGO_INITDB_ROOT_USERNAME=amigoscode
      - MONGO_INITDB_ROOT_PASSWORD=password
    networks:
      - mongo
    volumes:
      - data:/data
  mongo-express:
    image: mongo-express
    container_name: mongo-express
    ports: 
      - 8081:8081
    environment: 
      - ME_CONFIG_MONGODB_ADMINUSERNAME=amigoscode
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongo
    depends_on:
      - mongo
    restart: always
    networks:
      - mongo

volumes: 
  data: {}

networks:
  mongo:
    name: mongo
________
/** list volumes
docker volume ls
___Docker Compose Documentation
https://docs.docker.com/compose/

__Docker Sacn
docker scan --help

docker scan node

Ferramenta de Scan de vulnerabilidades  de images
Trivy
https://aquasecurity.github.io/trivy/v0.19.2/

/** forma de uso
$ trivy image dashboard:2

https://aquasecurity.github.io/trivy/v0.19.2/getting-started/quickstart/

/** DISTROLESS IMAGES - imagens pequenas e sem vulnerabilidades
https://github.com/GoogleContainerTools/distroless

/** Best Pratices Security
https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html


https://github.com/julianoaj/docker-php-laravel-nginx-mysql
